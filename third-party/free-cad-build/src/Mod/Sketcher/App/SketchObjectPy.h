
// This file is generated by src/Tools/generateTemaplates/templateClassPyExport.py out of the XML file
// Every change you make here get lost at the next full rebuild!
#ifndef SKETCHER_SKETCHOBJECTPY_H
#define SKETCHER_SKETCHOBJECTPY_H

#include <Mod/Part/App/Part2DObjectPy.h>
#include <Mod/Sketcher/App/SketchObject.h>
#include <string>

namespace Sketcher
{

//===========================================================================
// SketchObjectPy - Python wrapper
//===========================================================================

/** The python export class for SketchObject
 */
class SketcherExport SketchObjectPy : public Part::Part2DObjectPy
{
public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    static PyParentObject Parents[];
    virtual PyTypeObject *GetType(void) {return &Type;};
    virtual PyParentObject *GetParents(void) {return Parents;}

public:
    SketchObjectPy(SketchObject *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(struct _typeobject *, PyObject *, PyObject *);
    virtual int PyInit(PyObject* args, PyObject*k);
    ~SketchObjectPy();

    typedef SketchObject* PointerType ;

    virtual PyObject *_repr(void);        // the representation
    std::string representation(void) const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the solve() method
    static PyObject * staticCallback_solve (PyObject *self, PyObject *args);
    /// implementer for the solve() method
    PyObject*  solve(PyObject *args);
    /// callback for the addGeometry() method
    static PyObject * staticCallback_addGeometry (PyObject *self, PyObject *args);
    /// implementer for the addGeometry() method
    PyObject*  addGeometry(PyObject *args);
    /// callback for the delGeometry() method
    static PyObject * staticCallback_delGeometry (PyObject *self, PyObject *args);
    /// implementer for the delGeometry() method
    PyObject*  delGeometry(PyObject *args);
    /// callback for the toggleConstruction() method
    static PyObject * staticCallback_toggleConstruction (PyObject *self, PyObject *args);
    /// implementer for the toggleConstruction() method
    PyObject*  toggleConstruction(PyObject *args);
    /// callback for the addConstraint() method
    static PyObject * staticCallback_addConstraint (PyObject *self, PyObject *args);
    /// implementer for the addConstraint() method
    PyObject*  addConstraint(PyObject *args);
    /// callback for the delConstraint() method
    static PyObject * staticCallback_delConstraint (PyObject *self, PyObject *args);
    /// implementer for the delConstraint() method
    PyObject*  delConstraint(PyObject *args);
    /// callback for the addExternal() method
    static PyObject * staticCallback_addExternal (PyObject *self, PyObject *args);
    /// implementer for the addExternal() method
    PyObject*  addExternal(PyObject *args);
    /// callback for the delExternal() method
    static PyObject * staticCallback_delExternal (PyObject *self, PyObject *args);
    /// implementer for the delExternal() method
    PyObject*  delExternal(PyObject *args);
    /// callback for the delConstraintOnPoint() method
    static PyObject * staticCallback_delConstraintOnPoint (PyObject *self, PyObject *args);
    /// implementer for the delConstraintOnPoint() method
    PyObject*  delConstraintOnPoint(PyObject *args);
    /// callback for the setDatum() method
    static PyObject * staticCallback_setDatum (PyObject *self, PyObject *args);
    /// implementer for the setDatum() method
    PyObject*  setDatum(PyObject *args);
    /// callback for the movePoint() method
    static PyObject * staticCallback_movePoint (PyObject *self, PyObject *args);
    /// implementer for the movePoint() method
    PyObject*  movePoint(PyObject *args);
    /// callback for the getPoint() method
    static PyObject * staticCallback_getPoint (PyObject *self, PyObject *args);
    /// implementer for the getPoint() method
    PyObject*  getPoint(PyObject *args);
    /// callback for the getAxis() method
    static PyObject * staticCallback_getAxis (PyObject *self, PyObject *args);
    /// implementer for the getAxis() method
    PyObject*  getAxis(PyObject *args);
    /// callback for the fillet() method
    static PyObject * staticCallback_fillet (PyObject *self, PyObject *args);
    /// implementer for the fillet() method
    PyObject*  fillet(PyObject *args);
    /// callback for the trim() method
    static PyObject * staticCallback_trim (PyObject *self, PyObject *args);
    /// implementer for the trim() method
    PyObject*  trim(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the ConstraintCount attribute
    static PyObject * staticCallback_getConstraintCount (PyObject *self, void *closure);
    /// getter for the ConstraintCount attribute
    Py::Int getConstraintCount(void) const;
    /// setter callback for the ConstraintCount attribute
    static int staticCallback_setConstraintCount (PyObject *self, PyObject *value, void *closure);
    // no setter method,  ConstraintCount is read only!
    ///getter callback for the GeometryCount attribute
    static PyObject * staticCallback_getGeometryCount (PyObject *self, void *closure);
    /// getter for the GeometryCount attribute
    Py::Int getGeometryCount(void) const;
    /// setter callback for the GeometryCount attribute
    static int staticCallback_setGeometryCount (PyObject *self, PyObject *value, void *closure);
    // no setter method,  GeometryCount is read only!
    ///getter callback for the AxisCount attribute
    static PyObject * staticCallback_getAxisCount (PyObject *self, void *closure);
    /// getter for the AxisCount attribute
    Py::Int getAxisCount(void) const;
    /// setter callback for the AxisCount attribute
    static int staticCallback_setAxisCount (PyObject *self, PyObject *value, void *closure);
    // no setter method,  AxisCount is read only!
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(char *attr);              // __getattr__ function
    int _setattr(char *attr, PyObject *value);        // __setattr__ function

    /// getter for the object handled by this class
    SketchObject *getSketchObjectPtr(void) const;

    /** @name additional declarations and methods for the wrapper class */
    //@{

    //@}
};

#define PARENTSSketcherSketchObjectPy &SketchObjectPy::Type,PARENTSPartPart2DObjectPy

}  //namespace Sketcher

#endif  // SKETCHER_SKETCHOBJECTPY_H


